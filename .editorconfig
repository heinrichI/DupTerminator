# Editor configuration, see http://editorconfig.org
# Visual studio supported code style syntax https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
# Visual studio supported naming convention syntax https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions
# Undocumented https://kent-boogaart.com/blog/editorconfig-reference-for-c-developers
# Undocumented CS options https://github.com/dotnet/roslyn/blob/master/src/Workspaces/CSharp/Portable/Formatting/CSharpFormattingOptions.cs
# Undocumented .NET options https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/CodeStyle/CodeStyleOptions.cs

# top-most EditorConfig file, hierarchy search will stop in this file
root = true

# ----------------------------------------------------------------------------------------------------------------------
# General settings
# ----------------------------------------------------------------------------------------------------------------------

# Don't use tabs for indentation.
[*]
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)

[*.md]
trim_trailing_whitespace = false

# Code files
[*.{cs,csx,vb,vbx}]
charset = utf-8-bom
indent_size = 4
trim_trailing_whitespace = true
max_line_length = 200

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON and YML files
[*.{json,yml}]
indent_size = 2

# Scripting files
[*.{ps1,bat,cmd}]
indent_size = 4

# Java code files
[*.java]
indent_size = 2

# Pom files
[pom.xml]
indent_size = 2

# ----------------------------------------------------------------------------------------------------------------------
# Coding styles
# ----------------------------------------------------------------------------------------------------------------------

# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Suggest more modern language features when available
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion


# ----------------------------------------------------------------------------------------------------------------------
# Naming conventions
# ----------------------------------------------------------------------------------------------------------------------

# ORDERING DOES MATTER!!!
# Naming conventions should be ordered from most-specific to least-specific in the .editorconfig file.
# The first rule encountered that can be applied is the only rule that is applied.

[*.{cs,vb}]

# private поля с префиксом _
# Define the 'private_fields' symbol group:
dotnet_naming_symbols.private_fields.applicable_kinds           = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
# Define the 'prefix_underscore' naming style
dotnet_naming_style.prefix_underscore.capitalization = camel_case
dotnet_naming_style.prefix_underscore.required_prefix = _
dotnet_style_operator_placement_when_wrapping = beginning_of_line
# Define the 'private_members_with_underscore' naming rule
dotnet_naming_rule.private_members_with_underscore.symbols  = private_fields
dotnet_naming_rule.private_members_with_underscore.style = prefix_underscore
dotnet_naming_rule.private_members_with_underscore.severity = error

# Кричащие константы
# Define the 'const_fields' symbol group
dotnet_naming_symbols.const_fields.applicable_kinds = field
dotnet_naming_symbols.const_fields.required_modifiers = const
# Define the 'const' naming style
dotnet_naming_style.const.capitalization = all_upper
dotnet_naming_style.const.word_separator = _
# Define the 'private_const_fields_none' naming rule
dotnet_naming_rule.private_const_fields_none.symbols = const_fields
dotnet_naming_rule.private_const_fields_none.style = const
dotnet_naming_rule.private_const_fields_none.severity = error

# Используйте префикс «I» в именах интерфейсов
dotnet_naming_style.I_style.required_prefix = I
dotnet_naming_style.I_style.capitalization = pascal_case
dotnet_naming_symbols.I_symbol.applicable_kinds = interface
dotnet_naming_rule.Interface.symbols = I_symbol
dotnet_naming_rule.Interface.style = I_style
dotnet_naming_rule.Interface.severity = error

# Async methods should have "Async" suffix
dotnet_naming_symbols.any_async_methods.applicable_kinds = method
dotnet_naming_symbols.any_async_methods.applicable_accessibilities = *
dotnet_naming_symbols.any_async_methods.required_modifiers = async

dotnet_naming_style.end_in_async.required_prefix = 
dotnet_naming_style.end_in_async.required_suffix = Async
dotnet_naming_style.end_in_async.capitalization = pascal_case

dotnet_naming_rule.async_methods_end_in_async.symbols = any_async_methods
dotnet_naming_rule.async_methods_end_in_async.style = end_in_async
dotnet_naming_rule.async_methods_end_in_async.severity = suggestion

# ----------------------------------------------------------------------------------------------------------------------
# Rules
# ----------------------------------------------------------------------------------------------------------------------


# CS4014: Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'await' operator to the result of the call.
dotnet_diagnostic.CS4014.severity = error

# Remove unnecessary using directives
dotnet_diagnostic.IDE0005.severity = suggestion

# CA2000: Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = warning
